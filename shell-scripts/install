#!/bin/sh -e

# Install script for "kassandra" utilities
# Author: Georgi Kovachev
  Version=1.3.6

# Install/remove files, directories and links from
# this program's directory
# 
# 

PATH=/sbin:/usr/sbin:/bin:/usr/bin
sync
ME=$(basename       -- "$0")			# program name as invoked
SELF=$(readlink -ve -- "$0")			# /absolute/path/program
SELFDIR=$(dirname   "$SELF")			# /absolute/path
SELFNAME=$(basename "$SELF")			# program (true name)


# configuration start -------------------------
config_file=${SELF}.conf			# depends on program location and name
cp_opts='--preserve=timestamps,mode'		# default options for cp command
  # library files to be synchronized, command line parameters
sync_libs='-f functions.sh  -f encryption-functions.sh  lib  bak/lib  key/lib'

options='nv'					# global options
log_opts='n=$n v=$v'				# write options to log file
LOGFILE='/var/log/kassandra/kassandra.log'	# general log file for kassandra utilities
LOGPREFIX='cmd=$cmd es=$es'			# log message prefix
LOGSUFFIX='USER=$USER SUDO_USER=$SUDO_USER'	# log message suffix
VERBOSE=7					# 0 - never, 2 - disable, 7 - enable, 9 - max
EXECUTE=''					# 0 - never, 2 - disable, 7 - enable, 9 - max
# configuration end ===========================


# global variables start ----------------------
es=0						# exit status
cmd=$1						# command
alias=''					# short name
# global variables end ========================


# load general functions
f=${SELFDIR}/lib/functions.sh
[ -f "$f"  -a  -r "$f" ] && . "$f"	|| \
{ echo "$ME: FATAL ERROR: $f cannot be loaded. Aborting." >&2 ; exit 1 ; }

# load required files
# load_libs  lib/encryption-functions.sh
# load_libs  ${SELF}-functions.sh  ${SELF}-do-functions.sh

# embeded functions go here

do_add ()
{
		echo "$ME: Installing files:"

		# synchronize library files
		./sync-dirs/sync-dirs ${n:+'-n'} ${v:+'-v'} $sync_libs	|| return 5

		add_rem add				|| es=$?

		if [ $es -eq 0 ]; then
			echo "$ME: Installation complete successfuly."
		else
			echo "$ME: ERRORS FOUND. Inatallation not complete." >&2
		fi
		echo "Done."
}

do_remove ()
{
		echo "$ME: Removing files:"

		add_rem remove				|| es=$?

		if [ $es -eq 0 ]; then
			echo "$ME: Removing complete successfuly."
		else
			echo "$ME: ERRORS FOUND. Removing not complete." >&2
		fi
		echo "Done."
}

add_rem ()
{
	local keep_IFS es config_file_entry i flag err
	local cmd src dst type opts exist mode noremove al

	[ "$1" = 'add'  -o  "$1" = 'remove' ] && cmd=$1	|| return 21
	keep_IFS="$IFS"
	es=0
	flag=1
	err=0

	cd "${SELFDIR}" || return 22	# navigate to self directory for link resolving

	config_file_entry=$(remove_comments_from_file "$config_file")	|| es=23
	if [ $es -ne 0 ]; then
		echo -n "$ME: Error: Cannot read configuration" >&2
		echo " file ${config_file}" >&2
		return $es
	fi

	while read src dst type opts al; do
		exist=''
		mode=''
		noremove=''
		IFS=','
		for i in $opts; do
			[ "$i" = 'exist' ] && exist=${exist:='exist'}
			j=$(str2int "$i") && mode=${mode:=$i}
			[ "$i" = 'noremove' ] && noremove=${noremove:='noremove'}
		done
		IFS="$keep_IFS"

		case "$type" in
			file|link|dir|tree)
				if [ -z "$alias"  -o  "$alias" = "$al" ]; then
					flag=0
					"$type" "$cmd" "$src" "$dst" "$exist" "$mode" "$noremove" || es=$?
				fi
			;;
			*)
				echo "$ME: Error: Unsupported type $type" >&2
				es=24
			;;
		esac
		err_decoder
		[ $es -eq 0 ]				|| { es=0 && err=1; }
	done <<- EOCFE
		$config_file_entry
	EOCFE
	[ $flag -eq 0  -a  $err -eq 0 ]			|| es=25
	return $es
}

file ()
{
	local d

	tmp=${dst%/}
	d=${dst#$tmp}
	src=$(readlnk -- "$src")					|| return 31	# /path/to/file
	dst=$(readlnk -- "$dst")					|| return 32	# /path/to/file
	[ "$src" != "${src#${SELFDIR}/}" ]				|| return 33
	[ ! -e "$dst"  -o  -f "$dst"  -o  -d "$dst" ]			|| return 34
	src=${src#${SELFDIR}/}

	case "$cmd" in
		add)
			# setup install directory, use default mode
			[ "$d" = '/' ] && d=$dst || d=$(dirname "$dst")
			dir add '' "$d" "$exist" '' ''			|| return $?

			dbg cp $cp_opts $src "$dst"			|| return 35
			if [ -d "$dst" ]; then
				if [ -n "$mode" ]; then
					chmod -c "$mode" "$dst"/$(basename "$src") || return 36
				fi
			elif [ -f "$dst" ]; then
				if [ -n "$mode" ]; then
					chmod -c "$mode" "$dst"		|| return 36
				fi
			else
				return 38
			fi
		;;
		remove)
			[ "$noremove" = 'noremove' ]			&& return 0
			if [ -d "$dst" ]; then
				dbg rm -f "$dst"/$(basename "$src")	|| return 37
			elif [ ! -e "$dst"  -o  -f "$dst" ]; then
				dbg rm -f "$dst"			|| return 37
			else
				return 38
			fi
		;;
		*)	return 39	;;
	esac
}

tree ()
{
	src=$(readlnk -- "$src")					|| return 61	# /path/to/file
	dst=$(readlnk -- "$dst")					|| return 62	# /path/to/file
	[ "$src" != "${src#${SELFDIR}/}" ]				|| return 63
	[ ! -e "$dst"  -o  -d "$dst" ]					|| return 64
	src=${src#${SELFDIR}/}

	case "$cmd" in
		add)
			# setup install directory, use default mode
			dir add '' "$dst" "$exist" '' ''		|| return $?

			dbg cp -r $cp_opts $src "$dst"			|| return 65
			if [ -n "$mode" ]; then
				chmod -Rc "$mode" "$dst"		|| return 66
			fi
		;;
		remove)
			[ "$noremove" = 'noremove' ]			&& return 0
			if [ "$exist" = 'exist' ]; then
				dbg rm -rf "$dst"/*			|| return 67
			else
				dbg rm -rf "$dst"			|| return 68
			fi
		;;
		*)	return 69	;;
	esac
}

link ()
{
	local d tmp

	tmp=${dst%/}
	d=${dst#$tmp}
	[ -n "$src" ]							|| return 41
	[ -n "$dst" ]							|| return 42
	[ ! -e "$dst"  -o  -h "$dst"  -o  -d "$dst" ]			|| return 43

	case "$cmd" in
		add)
			# setup link directory, use default mode
			[ "$d" = '/' ] && d=$dst || d=$(dirname "$dst")
			dir add '' "$d" "$exist" '' '' 			|| return $?

			if [ -d "$dst"  -a  ! -h "$dst" ]; then
				dbg ln -sfn "$src" "$tmp/$(basename "$src")"	|| return 44
			else
				dbg ln -sfn "$src" "$dst"		|| return 44
			fi
		;;
		remove)
			[ "$noremove" = 'noremove' ]			&& return 0

			if [ -d "$dst"  -a  ! -h "$dst" ]; then
				dbg rm -f "$tmp/$(basename "$src")"	|| return 45
			else
				dbg rm -f "$dst"			|| return 45
			fi
		;;
		*)	return 49	;;
	esac
}

dir ()
{
	local cmd src dst exist mode noremove

	cmd=$1
	src=$2
	dst=$3
	exist=$4
	mode=$5
	noremove=$6

	case "$cmd" in
		add)
			dst=$(readlnk -- "$dst")			|| return 51	# /path/to/dir

			# if install directory must exist
			[ "$exist" != 'exist'  -o  -d "$dst" ]		|| return 52

			# create install directory if it does not exist
			if [ ! -e "$dst" ]; then
				dbg mkdir -p${mode:+m $mode} "$dst"	|| return 53
			fi
			[ -d "$dst" ]					|| return 54
			if [ -n "$mode" ]; then
				chmod -c "$mode" "$dst"			|| return 55
			fi
		;;
		remove)
			[ "$noremove" = 'noremove' ]			&& return 0
			:
		;;
		*)	return 59	;;
	esac
}

err_decoder ()
{
	[ $es -eq 0  -o  $es -gt 127 ]	&& return

	case $es in
		1)		echo "$ME: General error."					>&2	;;

		24)		echo "$ME: $es Error: Unsupported type $type"			>&2	;;
		31|51|61)	echo "$ME: $es Error: Cannot resolve source link $src"		>&2	;;
		32|62)		echo "$ME: $es Error: Cannot resolve destination link $dst"	>&2	;;
		33|63)		echo "$ME: $es Error: File $src not found in"			>&2
				echo "$ME: ${SELFDIR}"						>&2	;;
		34)		echo "$ME: $es Error: Destination  $dst"			>&2
				echo "$ME: exist and is not a regular file or directory."	>&2	;;
		35|65)		echo "$ME: $es Error: Cannot copy file(s)"			>&2	;;
		36|55|65)	echo "$ME: $es Error: Cannot change mode (chmod)"		>&2	;;
		37|67|68)	echo "$ME: $es Error: Cannot remove file(s)"			>&2	;;
		38)		echo "$ME: $es FATAL ERROR"					>&2	;;
		39|49|59|69)	echo "$ME: $es Invalid command $cmd"				>&2	;;
		41)		echo "$ME: $es Error: Link target is empty."			>&2	;;
		42)		echo "$ME: $es Error: Link name is empty."			>&2	;;
		43)		echo "$ME: $es Error: Destination  $dst"			>&2
				echo "$ME: exist and is not a link."				>&2	;;
		44)		echo "$ME: $es Error: Cannot create link $dst"			>&2	;;
		45)		echo "$ME: $es Error: Cannot remove link $dst"			>&2	;;
		52)		echo "$ME: $es Error: Destination  $dst"			>&2
				echo "$ME: does not exist or is not a directory."		>&2	;;
		53)		echo "$ME: $es Error: Cannot create directory $dst"		>&2	;;
		54)		echo "$ME: $es Error: Destination  $dst"			>&2
				echo "$ME: cannot be found."					>&2	;;
		64)		echo "$ME: $es Error: Destination  $dst"			>&2
				echo "$ME: exists and is not a directory."			>&2	;;

		*)		echo "$ME: $es No message is written for this exit status."	>&2	;;
	esac
}

feedback ()
{
	case "${1}-$es" in
		--on-load-0)
			:
		;;
		--on-load-*)
			echo ''
			echo "$ME: ERRORS FOUND"
			usage
		;;
		--on-exit-0)
			echo "$ME: Success"
		;;
		--on-exit-*)
			echo ''
			echo "$ME: ERRORS FOUND"
		;;
		--on-xxxx-0)
			if [ "$cmd" = 'cmd1'  -o  "$cmd" = 'cmd2'  -o  "$cmd" = 'cmd3' ]; then
				echo "$ME: Summary:"
				echo "    Command:      $cmd"
				echo "    Source:       $src		$dev"
				echo "    Destination:  $dst		$dev"
				echo "    Assume Yes:   $opt_yes"
				fb_prompt -t "$assume_yes"
				echo ''
			fi
		;;
		--on-xxxx-*)
			:
		;;
	esac
} >&2

usage ()
{
	echo "
Usage:
$ME  [--install|--uninstall|--remove] [alias]  # install/remove selected
     alias
        short name of files set to install/remove
Options:
    --install  - install all program related files on the system (default)
    --remove, --uninstall
               - remove all program related files from the system
    --help     - display this help and exit
    --version  - output version information and exit
Examples:
$ME                                            # install all
$ME  --uninstall                               # remove all
$ME  firewall                                  # install firewall
$ME  --uninstall  firewall                     # remove firewall
	" >&2
	[ $es -eq 0 ] && exit "${1:-0}"	|| exit $es
}

init ()
{
# Get command line parameters
	cmd=$1					# command
	case "$#" in
		0|1)
			case "$1" in
				--install | --uninstall | --remove)
					:
				;;
				*)
					cmd='--install'	# default
					alias=$1	# short name
				;;
			esac
		;;
		2)
			alias=$2		# short name
		;;
	esac
	[ $es -eq 0 ]	|| return $es

	[ "$DEBUG" = '1' ] && set -vx
	[ -n "$n" ] && EXECUTE=2
	[ -n "$v" ] && VERBOSE=9

# Checks if the configuration can satisfy the requirements
	must_be_installed -s

	cd "$SELFDIR"	|| exit 1		# navigate to self directory for link resolving

	case "$cmd" in
		--install | --uninstall | --remove)
			:
		;;
		*)	return 19	;;
	esac
}

# load_libs -f  ${SELF}-dev-functions.sh -- "$@"	# for development purposes

log Load: \$@="$@"				# log load parameters

case "$1" in
	--version)		version	;;	# exits with status 0
	--help | --usage)	usage	;;	# exits with status 0
esac

must_be_root					# root permissions required - exit if not granted
getoptions "$options" "$@"	&& shift $((OPTIND-1))	|| es=2
init "$@"			|| es=$?

log Init: "$(eval echo "$log_opts")" \$@="$@"	# log decoded parameters

feedback --on-load		|| es=$?
[ $es -eq 0 ]			|| exit $es

# move up to action: do what is needed
sync
case "$cmd" in
	--install)
		echo ''
		do_add "$@"	|| es=$?
		echo ''
	;;
	--uninstall | --remove)
		echo ''
		do_remove "$@"	|| es=$?
		echo ''
	;;
	*)
		usage 1
	;;
esac
feedback --on-exit

log Exit:					# log exit status

sync
exit $es

