#!/bin/sh -e

# Create/restore encrypted backups
# Author: Georgi Kovachev
  Version=1.0.16

# Creates compressed encrypted backups using gpg
# Backup types can be 'system', 'directory' or 'image'
# For best compression disk can be optionaly cleaned up
# Works also on files containing filesystem

PATH=/sbin:/usr/sbin:/bin:/usr/bin
sync
ME=$(basename       -- "$0")			# program name as invoked
SELF=$(readlink -ve -- "$0")			# /absolute/path/program
SELFDIR=$(dirname   "$SELF")			# /absolute/path
SELFNAME=$(basename "$SELF")			# program (true name)


# configuration start -------------------------
config_file=~/.kassandra/${SELFNAME}.conf	# important! /home/user/.pkg/progname.conf
key_script=''					# encryption key manager
key_get_prefix='-a r9V8SxAxDFv9xxDUwJw34e get'	# authenticate 'get' command







options='cf:nvy'				# global options
log_opts='c=$c f="$f" n=$n v=$v y=$y'		# write options to log file
LOGFILE='/var/log/kassandra/kassandra.log'	# general log file for kassandra utilities
LOGPREFIX='cmd=$cmd es=$es'			# log message prefix
LOGSUFFIX='USER=$USER SUDO_USER=$SUDO_USER'	# log message suffix
VERBOSE=''					# 0 - never, 2 - disable, 7 - enable, 9 - max
EXECUTE=''					# 0 - never, 2 - disable, 7 - enable, 9 - max
# configuration end ===========================

# global variables start ----------------------
es=0						# exit status
cmd=$1						# command

src=''						# source
dst=''						# destination
cmd_types=''					# packed command
bak_type=''					# system, ...
target_type=''					# home or ordinary directory
cleanup=''					# yes, no
assume_yes=''					# assume 'yes' to all questions (option -y or auto)
s_dev_msg=''					# source device message
d_dev_msg=''					# destination device message




# global variables end ========================


# load general functions
f=${SELFDIR}/lib/functions.sh
[ -f "$f"  -a  -r "$f" ] && . "$f"	|| \
{ echo "$ME: FATAL ERROR: $f cannot be loaded. Aborting." >&2 ; exit 1 ; }

# load required files
load_libs  lib/encryption-functions.sh
load_libs  ${SELF}-functions.sh  ${SELF}-do-functions.sh

# embeded functions go here

load_libs -f  ${SELF}-dev-functions.sh -- "$@"	# for development purposes

log Load: \$@="$@"				# log load parameters

case "$1" in
	--version)		version	;;	# exits with status 0
	--help | --usage)	usage	;;	# exits with status 0
esac

must_be_root					# root permissions required - exit if not granted
getoptions "$options" "$@"	&& shift $((OPTIND-1))	|| es=2
init "$@"			|| es=$?

log Init: "$(eval echo "$log_opts")" \$@="$@"	# log decoded parameters

feedback --on-load		|| es=$?
[ $es -eq 0 ]			|| exit $es

# move up to action: do what is needed
sync
case "$cmd" in
	create | restore | copy | fstab | cleanup)
		stm do_$cmd
	;;
	*)
		usage 1
	;;
esac
feedback --on-exit

log Exit:					# log exit status

sync
exit $es

